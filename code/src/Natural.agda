module Natural where

open import Basis
open import Category
open import Category.Setoids
open import Functor
open import Prelude.Monoidal

open РіЌ using (_,_)

record Transform
    ..{РёЊрхњРѓђ РёЊ╦брхњРѓђ РёЊ╦б╩░Рѓђ РёЊрхњРѓЂ РёЊ╦брхњРѓЂ РёЊ╦б╩░РѓЂ}
    {­Юњъ : Category РёЊрхњРѓђ РёЊ╦брхњРѓђ РёЊ╦б╩░Рѓђ}
    {­ЮњЪ : Category РёЊрхњРѓЂ РёЊ╦брхњРѓЂ РёЊ╦б╩░РѓЂ}
    (F G : Functor ­Юњъ ­ЮњЪ)
  : Set (РёЊрхњРѓђ Ріћ РёЊ╦брхњРѓђ Ріћ РёЊ╦б╩░Рѓђ Ріћ РёЊрхњРѓЂ Ріћ РёЊ╦брхњРѓЂ Ріћ РёЊ╦б╩░РѓЂ) where
    module ­Юњъ = Category.Category ­Юњъ
    module ­ЮњЪ = Category.Category ­ЮњЪ
    module F = Functor.Functor F
    module G = Functor.Functor G

    field
      trans
        : (a : ­Юњъ.obj)
        Рєњ S.obj (­ЮњЪ.hom╦б (F.apРѓђ a) (G.apРѓђ a))
      natural
        : {a b : ­Юњъ.obj}
        Рєњ (f : S.obj (­Юњъ.hom╦б a b))
        Рєњ S.homРіЌ (­ЮњЪ.hom╦б (F.apРѓђ a) (G.apРѓђ b))
            ( ­ЮњЪ.cmp╦б S.$Рѓђ (trans b , F.apРѓЂ S.$Рѓђ f)
            , ­ЮњЪ.cmp╦б S.$Рѓђ (G.apРѓЂ S.$Рѓђ f , trans a)
            )

[_,_]Рѓђ = Transform

open Functor.Functor
open Transform

[_,_]
  : ..{РёЊрхњРѓђ РёЊ╦брхњРѓђ РёЊ╦б╩░Рѓђ РёЊрхњРѓЂ РёЊ╦брхњРѓЂ РёЊ╦б╩░РѓЂ : _} {­Юњъ : Category РёЊрхњРѓђ РёЊ╦брхњРѓђ РёЊ╦б╩░Рѓђ} {­ЮњЪ : Category РёЊрхњРѓЂ РёЊ╦брхњРѓЂ РёЊ╦б╩░РѓЂ}
  Рєњ (F G : Functor ­Юњъ ­ЮњЪ)
  Рєњ obj (SETOID (РёЊ╦б╩░РѓЂ Ріћ РёЊ╦брхњРѓЂ Ріћ РёЊрхњРѓЂ Ріћ РёЊ╦б╩░Рѓђ Ріћ РёЊ╦брхњРѓђ Ріћ РёЊрхњРѓђ) (РёЊ╦б╩░РѓЂ Ріћ РёЊрхњРѓђ))
S.obj [ F , G ] = [ F , G ]Рѓђ
S.homРіЌ ([_,_] {­Юњъ = ­Юњъ} {­ЮњЪ = ­ЮњЪ} F G) (╬и , ╬Х) =
  (a : obj ­Юњъ)
    Рєњ S.homРіЌ (hom╦б ­ЮњЪ (apРѓђ F a) (apРѓђ G a))
        ( trans ╬и a
        , trans ╬Х a
        )
S.idnРЄњ ([_,_] {­ЮњЪ = ­ЮњЪ} F G) ­ЮЪЎРѓЎ.* c = S.idnРЄњ (hom╦б ­ЮњЪ (apРѓђ F c) (apРѓђ G c)) ­ЮЪЎРѓЎ.*
S.cmpРЄњ ([_,_] {­ЮњЪ = ­ЮњЪ} F G) (p , q) a = S.cmpРЄњ (hom╦б ­ЮњЪ (apРѓђ F a) (apРѓђ G a)) (p a , q a)
S.invРЄњ ([_,_] {­ЮњЪ = ­ЮњЪ} F G) p a = S.invРЄњ (hom╦б ­ЮњЪ (apРѓђ F a) (apРѓђ G a)) (p a)
